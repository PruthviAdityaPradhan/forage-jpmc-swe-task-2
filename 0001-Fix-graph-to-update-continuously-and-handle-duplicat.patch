From 647bf616903a652be542797f18d0cab9cf3c0101 Mon Sep 17 00:00:00 2001
From: pruthvi <pradhanpruthviaditya@gmail.com>
Date: Fri, 19 Jul 2024 23:48:22 +0530
Subject: [PATCH] Fix graph to update continuously and handle duplicate data

---
 src/App.tsx   | 24 +++++++++++++++++++++---
 src/Graph.tsx | 15 +++++++++++++--
 2 files changed, 34 insertions(+), 5 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..154c403 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -7,9 +7,11 @@ import './App.css';
  * State declaration for <App />
  */
 interface IState {
-  data: ServerRespond[],
+  data: any[];
+  showGraph: boolean;
 }
 
+
 /**
  * The parent element of the react app.
  * It renders title, button and Graph react element.
@@ -21,7 +23,9 @@ class App extends Component<{}, IState> {
     this.state = {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
+
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +33,32 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+  if (this.state.showGraph) {
+    return (<Graph data={this.state.data} />);
   }
 
+}
+
+
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+  let x = 0;
+  const interval = setInterval(() =>   {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({
+        data: serverResponds,
+        showGraph: true,
+       });
     });
+    x++;
+    if(x > 1000){
+    clearInterval(interval);
+       }
+    },100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..0cd907f 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,18 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+        {"stock": "distinct count",
+         "timestamp": "distinct count",
+         "top_ask_price": "avg",
+         "top_bid_price": "avg"}
+         `);
 
     const schema = {
       stock: 'string',
-- 
2.41.0.windows.3

